
" 打开语法高亮
syntax on
" 在屏幕右下角显示正在输入的命令
set showcmd
" 显示行号和相对行号
set number
set relativenumber
" 打开文件时折叠所有代码块
set foldlevelstart=0

" 组合键前缀
let mapleader = ";"
" 针对特定文件类型的组合键前缀
let maplocalleader = ","

" 快捷键
" 所有模式{{{
" 删除方向键的映射，强制使用主键盘
noremap <Up> <nop>
noremap <Down> <nop>
noremap <Left> <nop>
noremap <Right> <nop>
" }}}
" 普通模式{{{
" 按下<C-u>将光标当前所在单词转换为大写格式
nnoremap <C-u> viwU<esc>
inoremap <C-u> <esc>viwUi
" 编辑我的vimrc文件
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
" 重新载入我的vimrc文件
nnoremap <leader>sv :source $MYVIMRC<cr>
" 关闭所有窗口
nnoremap <leader>c :only<cr>:q<cr>
" 保存
nnoremap <leader>w :w<cr>
" 关闭当前文件
nnoremap <leader>q :q<cr>
" 关闭并保存当前文件
nnoremap <leader>x :x<cr>
" 用双引号括起光标所在单词
nnoremap <leader>" viw<esc>a"<esc>hbi"<esc>lel
" 将H, L映射到文件0, $
nnoremap H 0
nnoremap L $
" 切换窗口快捷键
nnoremap <leader>h <C-w><C-h>
nnoremap <leader>j <C-w><C-j>
nnoremap <leader>k <C-w><C-k>
nnoremap <leader>l <C-w><C-l>
" }}}
" 插入模式{{{
" 为<esc>添加映射，减轻左手负担
inoremap jk <esc>
inoremap <esc> <nop>
inoremap <C-c> <nop>
" }}}



" 自动拓展字符串{{{
iabbrev @@ lucianosimon399@yahoo.com
" }}}

" 自动执行的命令{{{
augroup mygroup
autocmd!
" 打开一个新文件时自动保存
" :autocmd BufNewFile * :write
" 根据文件类型设置不同的注释命令
autocmd FileType javascript,c,cpp nnoremap <buffer> <localleader>\ I//<esc>
autocmd FileType python nnoremap <buffer> <localleader>\ I#<esc>
autocmd FileType vim nnoremap <buffer> <localleader>\ I" <esc>
" 根据文件类型设定不同的自动补全
autocmd FileType python :iabbrev <buffer> imp import
autocmd FileType c,cpp :iabbrev <buffer> inc #inc
augroup END
" Vimscript file settings {{{
augroup filetype_vim
autocmd!
" 对vim脚本文件启用marker折叠方法
autocmd FileType vim setlocal foldmethod=marker
augroup END
" }}}
" }}}


" Vundle配置{{{
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
Plugin 'L9'
" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
"Plugin 'ascenator/L9', {'name': 'newL9'}

Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

"文件树
Plugin 'scrooloose/nerdtree'
" 这个插件可以显示文件的Git增删状态
Plugin 'Xuyuanp/nerdtree-git-plugin'

"全局搜索
Plugin 'kien/ctrlp.vim'

"taglist
Plugin 'vim-scripts/taglist.vim'

"自动完成
Plugin 'vim-scripts/OmniCppComplete'

"Plugin 'Valloric/YouCompleteMe'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
" }}}

" NERDTree 配置{{{
" Ctrl+N 打开/关闭
nmap <C-n> :NERDTreeToggle<CR>
" 当不带参数打开Vim时自动加载项目树
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" 当所有文件关闭时关闭项目树窗格
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
" 不显示这些文件
let NERDTreeIgnore=['\.pyc$', '\~$', 'node_modules'] "ignore files in NERDTree
" 不显示项目树上额外的信息，例如帮助、提示什么的
let NERDTreeMinimalUI=1
" 设置git修改文件
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }
" }}}

"全局搜索ctrlp{{{
let g:ctrlp_working_path_mode = 'ra'
set wildignore+=*/tmp/*,*/node_modules/*,*.so,*.swp,*.zip     
let g:ctrlp_custom_ignore = {'dir':  '\v[\/]\.(git|hg|svn)$', 'file': '\v\.(exe|so|dll)$'}
" }}}

" 将vim中copy的所有内容加入系统剪切板
set clipboard=unnamed

" ctags配置{{{
"" 按下F9重新生成tag文件，并更新taglist
map <F9> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR> :TlistUpdate<CR>
imap <F9> <ESC>:!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR> :TlistUpdate<CR>
set tags=tags
set tags+=./tags "add current directory's generated tags file

let Tlist_Show_One_File=1 " 只展示一个文件的taglist 
let Tlist_Exit_OnlyWindow=1 " 当taglist是最后以个窗口时自动退出 
let Tlist_Use_Right_Window=1 " 在右边显示taglist窗口 
let Tlist_Sort_Type="name" " tag按名字排序
" }}}

" OmniComplete设置{{{
filetype plugin indent on 
set completeopt=longest,menu 
let OmniCpp_NamespaceSearch = 2 " search namespaces in the current buffer and in included files 
let OmniCpp_ShowPrototypeInAbbr = 1 " 显示函数参数列表 
let OmniCpp_MayCompleteScope = 1 " 输入 :: 后自动补全 
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
" }}}
 
" 自动编译运行{{{
" F6编译和运行C程序，C++程序,Python程序，shell程序，F9 gdb调试
" 请注意，下述代码在windows下使用会报错，需要去掉./这两个字符
" <leader>6 编译和运行C
map <leader>6 :call CompileRunGcc()<cr>
func! CompileRunGcc()
exec "w"
exec "!gcc % -o %<"
exec "! ./%<"
endfunc
 
"< F7> 编译和运行C++
map <leader>7 :call CompileRunGpp()<cr>
func! CompileRunGpp()
exec "w"
exec "!g++ % -o %<"
exec "! ./%<"
endfunc
  
" <leader>8 运行python程序
map <leader>8 :w<cr>:!python %<cr>
 
"<leader>9  gdb调试
map <leader>9 :call Debug()<cr>
func!  Debug()
exec "w"
exec "!gcc % -o %< -gstabs+"
exec "!gdb %<"
endfunc
" }}}
